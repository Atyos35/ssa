name: Backend CQS Tests

on:
  pull_request:
    branches:
      - main
    paths:
      - 'Backend/**'
  push:
    branches:
      - main
    paths:
      - 'Backend/**'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: [8.3.19]
        dependency-version: [prefer-stable]

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      APP_ENV: test
      APP_SECRET: ${{ secrets.APP_SECRET }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      CORS_ALLOW_ORIGIN: ${{ secrets.CORS_ALLOW_ORIGIN }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      JWT_PUBLIC_KEY: ${{ secrets.JWT_PUBLIC_KEY }}
      JWT_PRIVATE_KEY: ${{ secrets.JWT_PRIVATE_KEY }}
      JWT_PASSPHRASE: ${{ secrets.JWT_PASSPHRASE }}
      MAILER_DSN: ${{ secrets.MAILER_DSN }}
      MESSENGER_TRANSPORT_DSN: ${{ secrets.MESSENGER_TRANSPORT_DSN }}
      PASSWORD_TEST: ${{ secrets.PASSWORD_TEST }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, pdo, pdo_pgsql, apcu, intl, opcache, zip
          coverage: xdebug
          tools: composer:v2

      - name: Change to Backend directory
        run: cd Backend

      - name: Create .env
        working-directory: Backend
        run: |
          cat <<EOF > .env
          APP_ENV=dev
          APP_SECRET=${{ secrets.APP_SECRET }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          CORS_ALLOW_ORIGIN=${{ secrets.CORS_ALLOW_ORIGIN }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          JWT_PUBLIC_KEY=${{ secrets.JWT_PUBLIC_KEY }}
          JWT_PRIVATE_KEY=${{ secrets.JWT_PRIVATE_KEY }}
          JWT_PASSPHRASE=${{ secrets.JWT_PASSPHRASE }}
          MAILER_DSN=${{ secrets.MAILER_DSN }}
          MESSENGER_TRANSPORT_DSN=${{ secrets.MESSENGER_TRANSPORT_DSN }}
          PASSWORD_TEST=${{ secrets.PASSWORD_TEST }}
          DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@127.0.0.1:5432/${POSTGRES_DB}?serverVersion=16&charset=utf8
          EOF

      - name: Create .env.test
        working-directory: Backend
        run: |
          cat <<EOF > .env.test
          APP_ENV=test
          APP_SECRET=${{ secrets.APP_SECRET }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          CORS_ALLOW_ORIGIN=${{ secrets.CORS_ALLOW_ORIGIN }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          JWT_PUBLIC_KEY=${{ secrets.JWT_PUBLIC_KEY }}
          JWT_PRIVATE_KEY=${{ secrets.JWT_PRIVATE_KEY }}
          JWT_PASSPHRASE=${{ secrets.JWT_PASSPHRASE }}
          MAILER_DSN=${{ secrets.MAILER_DSN }}
          MESSENGER_TRANSPORT_DSN=${{ secrets.MESSENGER_TRANSPORT_DSN }}
          PASSWORD_TEST=${{ secrets.PASSWORD_TEST }}
          DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@127.0.0.1:5432/${POSTGRES_DB}?serverVersion=16&charset=utf8
          EOF

      - name: Install Composer dependencies
        working-directory: Backend
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h 127.0.0.1 -p 5432 -U ${{ secrets.POSTGRES_USER }}; do
            echo "Waiting for PostgreSQL..."
            sleep 5
          done

      - name: Create test database
        working-directory: Backend
        run: |
          export DATABASE_URL="postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@127.0.0.1:5432/${{ secrets.POSTGRES_DB }}?serverVersion=16&charset=utf8"
          php bin/console doctrine:database:create --env=test --no-interaction

      - name: Create test schema
        working-directory: Backend
        run: |
          export DATABASE_URL="postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@127.0.0.1:5432/${{ secrets.POSTGRES_DB }}?serverVersion=16&charset=utf8"
          php bin/console doctrine:schema:create --env=test --no-interaction

      - name: Run Unit Tests (Fast)
        working-directory: Backend
        run: |
          export DATABASE_URL="postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@127.0.0.1:5432/${{ secrets.POSTGRES_DB }}?serverVersion=16&charset=utf8"
          ./vendor/bin/phpunit --testsuite=Unit --coverage-text

      - name: Run Integration Tests
        working-directory: Backend
        run: |
          export DATABASE_URL="postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@127.0.0.1:5432/${{ secrets.POSTGRES_DB }}?serverVersion=16&charset=utf8"
          ./vendor/bin/phpunit -c phpunit.integration.xml --coverage-text

      - name: Run All Tests with Coverage Report
        working-directory: Backend
        run: |
          export DATABASE_URL="postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@127.0.0.1:5432/${{ secrets.POSTGRES_DB }}?serverVersion=16&charset=utf8"
          # Utiliser explicitement la configuration avec exclusions pour la couverture
          ./vendor/bin/phpunit -c phpunit.dist.xml --testsuite="Application Test Suite" --coverage-text --coverage-clover=coverage.xml

      - name: Check Coverage Threshold
        working-directory: Backend
        run: |
          COVERAGE=$(php -r '
            $xml = simplexml_load_file("coverage.xml");
            $metrics = $xml->project->metrics;
            $covered = (int)$metrics["coveredstatements"];
            $total = (int)$metrics["statements"];
            echo round(($covered / $total) * 100, 2);
          ')
          echo "Test Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Test coverage is below 80% ($COVERAGE%)"
            exit 1
          else
            echo "✅ Test coverage is above 80% ($COVERAGE%)"
          fi